[{"authors":null,"categories":null,"content":"I am a final-year PhD researcher in Computational Neuroscience working under the umbrella of Marie-Curie Actions (MSCA-ITN). I'm focused on leveraging Machine Learning as a method for developing better tools for Neuroscience research and as a model for studying the human brain. By building on state-of-the-art active sampling and representation learning research we are developing human-in-the-loop frameworks to optimize brain signal and creating novel AutoML frameworks that benefit from small datasets. I\u0026rsquo;m also looking into using auto-regressive models to build normative models of the human brain.  Download my CV.\n ","date":1617461081,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1617461081,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I am a final-year PhD researcher in Computational Neuroscience working under the umbrella of Marie-Curie Actions (MSCA-ITN). I'm focused on leveraging Machine Learning as a method for developing better tools for Neuroscience research and as a model for studying the human brain.","tags":null,"title":"Pedro F da Costa","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"http://pedroferreiradacosta.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Walter Hugo Lopez Pinaya","Pedro F. da Costa","Jessica Dafflon"],"categories":["Deep Learning"],"content":"This post is presented in noteworthy - the journal blog.\nHi everybody! Today, we will continue the series about autoregressive models.\nSummary  Autoregressive models — PixelCNN Modelling coloured images PixelCNN’s blind spot in the receptive field Fixing the blind spot — Gated PixelCNN Conditional generation with Gated PixelCNN Gated PixelCNN with cropped convolutions Improving performance — PixelCNN++ Improving sampling time — Fast PixelCNN++ Using attention mechanisms — PixelSNAIL Generating Diverse High-Fidelity Images — VQ-VAE 2  For each topic, we implemented the models that are available in this repository.\nIn our previous post, we described an Autoregressive model for grayscale images, which only have one channel. In this post, we will talk about how to model images with multiples channels, such as RGB images. Let’s start!\nThe code for this topic can be found in this link.\nIntroduction As we discussed in our previous post, autoregressive generative models generate data from the product of conditional distributions, meaning that they depend on the previous pixels. So, to train the PixelCNN, we need to impose an ordering on the pixels of the generated image (e.g., from top to bottom and from left to right). To hide “future” pixels in convolutional operations, we mask the convolutional layers to ignore the information coming after the already predicted pixels. The first layer of the model should not have access to the pixel of interest of the input image, so we zero out the central pixel in the mask (we call this Mask A). But in the subsequent layers, the central pixel in the mask is already ignoring the pixel of interest of the input image, so it shouldn’t be zeroed out, so we use a Mask B. When dealing with images with more than one channel, such as coloured images which have three colour channels, which masks should we be using?\nColoured Images Coloured images are composed of three channels, Red, Green and Blue (RGB). The different colour channels can also be called sub-pixels. Each sub-pixel is not independent of the others as they compose a congruent image when combined. It is, therefore, necessary to order the sub-pixels so that we can process them sequentially and account for previous sub-pixels when predicting the next one, just as we do for the pixels. The masks need to be constructed to ensure that the prediction of a pixel is not a function of its input value.\nFollowing the original paper, we choose to order the sub-pixels from R → G → B. In the first convolutional layer, we use Mask A where the R channel will have only access to the information of the previous pixels, which we call context, the G channel will have access to the context and the R channel, and finally, the B channel will have access to the context and both R and G channel. In the following convolutional layers, the central pixel of the previous convolutional layer has not ‘seen’ the input’s central pixel. So, the central sub-pixel does not need to be zeroed out. This means that in Mask B, the R channel has access to the context and the previous layer’s R channel. The G channel has access to the context plus the R and G channel and the B channel will have access to the context and the three channels.\nHere we present a snippet showing how to build the masks for images with more than one channel. When the mask is connecting a channel of the current layer (i) that is a later order channel than the previous layer channel (j) and we zero out the central pixel. For mask A, we also zero out the central pixel when the current layer is connecting the same channel in the previous layer.\nThe network architecture we used is similar to the one presented for one-channel generative models, following Oord et al. 2016 implementation with 15 residual blocks and was presented on our first blog post.\nInference When we are inferring coloured images, we have to predict three times more values than for one-channel images. This makes training the model more challenging. Here we trained our PixelCNN using the CIFAR10 dataset, so following Andrej Karpathy’s recipe for training neural networks, we started by overfitting the model to the first two training set images.\nSo far, so good. After 10 epochs the model had already learned to mimic exactly the training set. But when we try to predict the next pixels of an occluded image that the model hasn’t seen yet, it does a poor job of completing the picture. This is expected as the model only learned to replicate the two examples it was shown.\nNext, we trained our PixelCNN for 20 epochs using 50000 training images example to make our model learn the natural images.\nNow our results were less than brilliant. Despite generating interesting landscapes, they don’t seem to be learning the structure of the natural images they were trained on.\nIn future posts, we are going to explore reasons behind the ineffectiveness — like the receptive field’s blind spot, and we are going to learn new techniques to improve on the quality of the generated images. Until then, we can simplify the problem by quantising the CIFAR10 images from their original 256 intensity values per sub-pixel to just 8 intensity values per sub-pixel. We trained the same model for 20 epochs and show how the generated image is evolving along epochs.\nThe images generated in the final epochs already has a natural combination of colours. It also does not look like images in the training data, so it is learning the data manifold distribution. We can now see what images the model generates and how it predicts occluded images, just as in the previous case.\nConclusion It’s a challenge to train a PixelCNN to predict coloured figures. Although reducing the number of pixel intensity levels from 256 to 8 improved the results, the generated images were still not ideal. We briefly mentioned during the text that the performance could be improved by fixing the blind spot problem. So in the next two blog post, we will first introduce what is the blind spot and then we will show how we can fix it. So, stay tuned!\nReferences  http://bjlkeng.github.io/posts/pixelcnn/ https://github.com/bjlkeng/sandbox/blob/master/notebooks/pixel_cnn/pixelcnn_helpers.py http://sergeiturukin.com/2017/02/22/pixelcnn.html https://github.com/rampage644/wavenet/blob/master/wavenet/models.py https://github.com/tensorflow/magenta/blob/master/magenta/reviews/pixelrnn.md  ","date":1618866242,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618866242,"objectID":"a1599d8a67e24ed0b1a4e5d98861c593","permalink":"http://pedroferreiradacosta.github.io/post/auto_encoder2/","publishdate":"2021-04-19T22:04:02+01:00","relpermalink":"/post/auto_encoder2/","section":"post","summary":"This post is presented in noteworthy - the journal blog.\nHi everybody! Today, we will continue the series about autoregressive models.\nSummary  Autoregressive models — PixelCNN Modelling coloured images PixelCNN’s blind spot in the receptive field Fixing the blind spot — Gated PixelCNN Conditional generation with Gated PixelCNN Gated PixelCNN with cropped convolutions Improving performance — PixelCNN++ Improving sampling time — Fast PixelCNN++ Using attention mechanisms — PixelSNAIL Generating Diverse High-Fidelity Images — VQ-VAE 2  For each topic, we implemented the models that are available in this repository.","tags":["Deep Learning","Autoregressive","PixelCNN","generative models"],"title":"Modelling Coloured Images","type":"post"},{"authors":["Walter Hugo Lopez Pinaya","Pedro F. da Costa","Jessica Dafflon"],"categories":[],"content":"This post is presented in towardsdatascience.com.\nHi everybody! This is our first post of a series about modern autoregressive models. Here are the topics we are going to cover in this series:\nSummary\n Autoregressive models — PixelCNN Modelling coloured images PixelCNN’s blind spot in the receptive field Fixing the blind spot — Gated PixelCNN Conditional generation with Gated PixelCNN Gated PixelCNN with cropped convolutions Improving performance — PixelCNN++ Improving sampling time — Fast PixelCNN++ Using attention mechanisms — PixelSNAIL Generating Diverse High-Fidelity Images — VQ-VAE 2  The implementation for each one of these topics can be found in this repository.\nLet’s start!\nIntroduction Generative models are an important class of models from unsupervised learning that have been receiving a lot of attention in these last few years. These can be defined as a class of models whose goal is to learn how to generate new samples that appear to be from the same dataset as the training data. During the training phase, a generative model tries to solve the core task of density estimation. In density estimation, our model learns to construct an estimate — pmodel(x) — as similar as possible to the unobservable probability density function — pdata(x). It is important to mention that the generative model should be able to make up new samples from the distribution, and not just copy and paste existing ones. Once we have successfully trained our model, it can be used for a wide variety of applications that range from forms of reconstruction such as image inpainting, colourization, and super-resolution, to the generation of artwork.\nThere are a few different approaches that we can use to perform this probability density estimation, such as:\n Generative Adversarial Networks (GANs) use an approach where the model performs an implicit density estimation. In this case, we train a model that can create samples from pmodel(x) without explicitly defining pmodel(x); the model learns a stochastic procedure that generates data but does not provide knowledge of the probability of observations or specify a conditional log-likelihood function; Variational autoencoders (VAE) use an explicit density estimation but define an intractable density function with latent variables that cannot be optimized directly. So, to train the model, we derive and optimize the lower bound of likelihood instead (approximate density); we optimize the log-likelihood of the data by maximizing the evidence lower bound (ELBO) (more details can be found here and here); Autoregressive (AR) models create an explicit density model that is tractable to maximize the likelihood of training data (tractable density). For this reason, with these methods, it is easy to compute the likelihood of data observation and to get an evaluation metric of the generative model.  As we mentioned, the autoregressive is one practical approach that provides an explicit modelling of the likelihood function. However, to model data with several dimensions/features, autoregressive models need to impose some conditions. First, the input-space X needs to have a determining ordering for its features. That is why autoregressive models are normally used for time series that have an intrinsic sequence of time steps. However, they can be employed for images by defining, for example, that the pixels on the left come before the ones on the right, and the ones on top before the ones on the bottom. Second, to tractably model the joint distribution of the features in a data observation (p(x)), the autoregressive approach casts p(x) as a product of conditional distributions.\nAutoregressive models define the joint distribution using conditionals over each feature, given the values of the previous features. For example, the probability of a pixel from an image to have a specific intensity value is conditioned by the values of all previous pixels; and the probability of an image (the joint distribution of all pixels) is the combination of the probability of all its pixels. Therefore, autoregressive models use the chain rule to decompose the likelihood of the data sample x into a product of 1-dimensional distributions (equations below). The factorization turns the joint modelling problem into a sequence problem, where one learns to predict the next pixel given all the previously generated pixels.\nThese conditions (i.e. determining ordering and product of conditional distribution) are what mainly defines an autoregressive model.\nNow, the big challenge is to calculate these conditional likelihoods $p(x_{i}| x_{1}, …, x_{i-1})$. How can we define these complex distributions in an expressive model that is also tractable and scalable? One solution is to use universal approximators, like deep neural networks.\nPixelCNN DeepMind introduced PixelCNN in 2016 (Oord et al., 2016), and this model started one of the most promising families of autoregressive generative models. Since then it has been used to generate speech, videos, and high-resolution pictures.\nPixelCNN is a deep neural network that captures the distribution of dependencies between pixels in its parameters. It sequentially generates one pixel at a time in an image along the two spatial dimensions.\nUsing convolution operations, PixelCNN can parallelly learn the distribution of all pixels in the image. However, when determining the probability of a specific pixel, the receptive field of a standard convolutional layer violates the sequential prediction of autoregressive models. When processing the information of a central pixel, the convolutional filter considers all the pixels around it to calculate the output feature map, not only the previous pixels. Masks are then adopted to block information flow from pixels not yet predicted.\nMasked convolutional layers Masking can be done by zeroing out all the pixels that should not be considered. In our implementation, a mask with the same size of the convolutional filter with values 1 and 0 was created. This mask was multiplied with the weight tensor before doing the convolution operation. In the PixelCNN, there are two types of masks:\n Mask type A: this mask is applied only to the first convolutional layer. It restricts access to the pixel of interest by zeroing the central pixel in the mask. This way, we guarantee that the model will not access the pixel that it is about to predict (in red in the figure below). Mask type B: This mask is applied to all the subsequent convolutional layers and relaxes the restrictions of mask A by allowing the connection from a pixel to itself. This is important in order to account for the pixel prediction of the first layer.  Here we present a snippet showing the implementation of the mask using the Tensorflow 2.0 framework.\nclass MaskedConv2D(keras.layers.Layer): \u0026quot;\u0026quot;\u0026quot;Convolutional layers with masks. Convolutional layers with simple implementation of masks type A and B for autoregressive models. Arguments: mask_type: one of `\u0026quot;A\u0026quot;` or `\u0026quot;B\u0026quot;.` filters: Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution). kernel_size: An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window. Can be a single integer to specify the same value for all spatial dimensions. strides: An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any `dilation_rate` value != 1. padding: one of `\u0026quot;valid\u0026quot;` or `\u0026quot;same\u0026quot;` (case-insensitive). kernel_initializer: Initializer for the `kernel` weights matrix. bias_initializer: Initializer for the bias vector. \u0026quot;\u0026quot;\u0026quot; def __init__(self, mask_type, filters, kernel_size, strides=1, padding='same', kernel_initializer='glorot_uniform', bias_initializer='zeros'): super(MaskedConv2D, self).__init__() assert mask_type in {'A', 'B'} self.mask_type = mask_type self.filters = filters self.kernel_size = kernel_size self.strides = strides self.padding = padding.upper() self.kernel_initializer = initializers.get(kernel_initializer) self.bias_initializer = initializers.get(bias_initializer) def build(self, input_shape): self.kernel = self.add_weight('kernel', shape=(self.kernel_size, self.kernel_size, int(input_shape[-1]), self.filters), initializer=self.kernel_initializer, trainable=True) self.bias = self.add_weight('bias', shape=(self.filters,), initializer=self.bias_initializer, trainable=True) center = self.kernel_size // 2 mask = np.ones(self.kernel.shape, dtype=np.float32) mask[center, center + (self.mask_type == 'B'):, :, :] = 0. mask[center + 1:, :, :, :] = 0. self.mask = tf.constant(mask, dtype=tf.float32, name='mask') def call(self, input): masked_kernel = tf.math.multiply(self.mask, self.kernel) x = nn.conv2d(input, masked_kernel, strides=[1, self.strides, self.strides, 1], padding=self.padding) x = nn.bias_add(x, self.bias) return x  Architecture In Oord et al. 2016, the PixelCNN uses the following architecture: the first layer is a masked convolution (type A) with 7x7 filters. Then, 15 residuals blocks were used. Each block processes the data with a combination of 3x3 convolutional layers with mask type B and standard 1x1 convolutional layers. Between each convolutional layer, there is a non-linearity ReLU. Finally, the residual blocks also include a residual connection.\nAfter the sequence of the blocks, the network has a chain of RELU-CONV-RELU-CONV layers using standard convolutional layers with 1x1 filters. Then, the output layer is a softmax layer which predicts the value among all possible values of a pixel. The output of the model has the same spatial format as the input image (because we want an output value for each pixel) times the number of possible values (for example, 256 intensity levels). Here we present a snippet showing the implementation of the network architecture using the Tensorflow 2.0 framework.\nclass ResidualBlock(keras.Model): \u0026quot;\u0026quot;\u0026quot;Residual blocks that compose pixelCNN Blocks of layers with 3 convolutional layers and one residual connection. Based on Figure 5 from [1] where h indicates number of filters. Refs: [1] - Oord, A. V. D., Kalchbrenner, N., \u0026amp; Kavukcuoglu, K. (2016). Pixel recurrent neural networks. arXiv preprint arXiv:1601.06759. \u0026quot;\u0026quot;\u0026quot; def __init__(self, h): super(ResidualBlock, self).__init__(name='') self.conv2a = keras.layers.Conv2D(filters=h, kernel_size=1, strides=1) self.conv2b = MaskedConv2D(mask_type='B', filters=h, kernel_size=3, strides=1) self.conv2c = keras.layers.Conv2D(filters=2 * h, kernel_size=1, strides=1) def call(self, input_tensor): x = nn.relu(input_tensor) x = self.conv2a(x) x = nn.relu(x) x = self.conv2b(x) x = nn.relu(x) x = self.conv2c(x) x += input_tensor return x # Create PixelCNN model inputs = keras.layers.Input(shape=(height, width, n_channel)) x = MaskedConv2D(mask_type='A', filters=128, kernel_size=7, strides=1)(inputs) for i in range(15): x = ResidualBlock(h=64)(x) x = keras.layers.Activation(activation='relu')(x) x = keras.layers.Conv2D(filters=128, kernel_size=1, strides=1)(x) x = keras.layers.Activation(activation='relu')(x) x = keras.layers.Conv2D(filters=128, kernel_size=1, strides=1)(x) x = keras.layers.Conv2D(filters=q_levels, kernel_size=1, strides=1)(x) pixelcnn = keras.Model(inputs=inputs, outputs=x)  Preprocessing The input values of the PixelCNN were scaled to be in the range of [0, 1]. During this preprocessing, it was possible to quantize the values of the pixels in a lower number of intensity levels. In our implementation, we first present the model trained with two intensity levels, and then with all the 256 levels. We notice that the model performed better in the data with fewer levels due to the lower problem complexity (less possible values to consider in the probability distributions of the pixels).\nThe target data corresponded to categorical (integer) values indicating a pixel’s intensity.\nModel evaluation PixelCNN has an easy method to train. The model learns its parameters by maximizing the likelihood of the training data.\nAs most optimization problems are defined as a minimization problem, a commonly used trick is to transform the training objective into the minimization of the negative log-likelihood (NLL).\nSince $p(x_{i}|\\theta)$ correspond to the probabilities outputted by the softmax layer, the NLL is equivalent to the cross-entropy loss function — a commonly used loss function in supervised learning. Also, NLL is a metric used to compare the performance between generative methods (using nats units or bits per pixel).\nInference Since PixelCNN is an autoregressive model, inference happens to be sequential — we have to generate pixel by pixel. First, we generate an image by passing zeros to our model. It shouldn’t influence the very first pixel as its value is modelled to be independent of all the others. So, we perform forward pass and obtain its distribution. Given the distribution, we sample a value from a multinomial probability distribution. Then, we update our image with sampled pixel values, and we repeat this process until we have all pixel values generated. Here used a PixelCNN to generate samples after 150 epochs using the MNIST dataset. Each generated image had four levels of pixel intensity.\nThe same sampling process can be used with images partially occluded as starting point.\nNow, we also tried to train or model to produce images with 256 levels of pixel intensity.\nThis sampling process is relatively slow when compared with other generative models (VAE and GANs), where all pixels are generated in one go. However, recent advances have used cached values to reduce the sampling time (Fast PixelCNN++, addressed in the next posts)\nConclusion The advantage of the PixelCNN model is that the joint probability learning technique is tractable, and it can be learned using gradient descent. There is no approximation; we just try to predict each pixel value given all the previous pixel values. Since PixelCNN is trained by minimizing the negative log-likelihood, its training is more stable when compared with alternatives approaches (e.g. GANs — that requires to find the Nash equilibrium). However, as the generation of samples is sequential (pixel-by-pixel), the original PixelCNN struggles with scalability. In the next post, we will train a PixelCNN model in a dataset with RGB channels.\nReferences  http://sergeiturukin.com/2017/02/22/pixelcnn.html https://towardsdatascience.com/auto-regressive-generative-models-pixelrnn-pixelcnn-32d192911173 https://deepgenerativemodels.github.io/ https://eigenfoo.xyz/deep-autoregressive-models/ https://wiki.math.uwaterloo.ca/statwiki/index.php?title=STAT946F17/Conditional_Image_Generation_with_PixelCNN_Decoders https://www.codeproject.com/Articles/5061271/PixelCNN-in-Autoregressive-Models https://towardsdatascience.com/blind-spot-problem-in-pixelcnn-8c71592a14a https://www.youtube.com/watch?v=5WoItGTWV54\u0026amp;t=1165s https://www.youtube.com/watch?v=R8fx2b8Asg0 https://arxiv.org/pdf/1804.00779v1.pdf https://blog.evjang.com/2019/07/likelihood-model-tips.html https://arxiv.org/abs/1810.01392 http://bjlkeng.github.io/posts/pixelcnn/ https://jrbtaylor.github.io/conditional-pixelcnn/ http://www.gatsby.ucl.ac.uk/~balaji/Understanding-GANs.pdf https://www.cs.ubc.ca/~lsigal/532S_2018W2/Lecture13b.pdf https://tinyclouds.org/residency/ https://tensorflow.blog/2016/11/29/pixelcnn-1601-06759-summary/ https://web.cs.hacettepe.edu.tr/~aykut/classes/spring2018/cmp784/slides/lec10-deep_generative_models-part-I_2.pdf  ","date":1618864593,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618864593,"objectID":"1ec8f8dac3c8a5de4e0e34e759d9080d","permalink":"http://pedroferreiradacosta.github.io/post/auto_encoder/","publishdate":"2021-04-19T21:36:33+01:00","relpermalink":"/post/auto_encoder/","section":"post","summary":"This post is presented in towardsdatascience.com.\nHi everybody! This is our first post of a series about modern autoregressive models. Here are the topics we are going to cover in this series:","tags":["Deep Learning","Autoregressive","PixelCNN","generative models"],"title":"Autoregressive Models — PixelCNN","type":"post"},{"authors":["Pedro F da Costa"],"categories":["Deep Learning","Machine Learning","Software Development"],"content":"Bayesian Optimization is an efficient algorithm for sampling unknown costly functions to find its optimal value. It does so, by trading-off between exploitation and exploration through the use of an acquisition function and it requires a minimal number of samples. In neuroscience research, hypothesis testing is extremely costly (and exploration analyses has lead to bad science practices [ 1 ] ).\nIn my PhD research, one of my main focuses is to build convenient tools that empower the researcher to automatically navigate different hypothesis to solve a problem. I do so, by tackling 2 fields of research:\n Building a novel AutoML algorithm that organizes the configuration space of ML predictors borrowing from Collaborative Filtering research. Using Generative Adersarial Networks (GANs) to build semantically disentangled spaces of faces to optimize individual response.  The 2 sub-projects are detailed below.\n ModelZoom\nA data-driven approach for AutoML ModelZoom is an AutoML tool that leverages the organization of the configurational space of pipelines to maximise information of each sampled pipeline. The configurational space is built by distilling meta-data from each single pipeline prediction on a number of dataset. The information is reduced from very high-dimensions to a low-dimensional configurational space using techniques from Collaborative Filtering. This Euclidean space is used to maximise information obtained from sampling a given pipeline by assuming the correlation of prediction of neighbouring pipelines.\nThis work is currently under review for publication and was presented at the Machine Learning Summer School 2020 (MLSS2020). The video presentation can be accessed below.\n   FaceFitOpt\nOptimizing neural data over facial stimuli In this project we use Bayesian optimization to guide human neural and behavioural responses to facial stimuli in order to maximise different target metrics. The space of facial stimuli is organized by manipulating a GAN latent space trained on faces (FFHQ). In this project we present results from a web-based proof-of-principle study, where participants rated images of themselves generated via performing Bayesian optimization over the latent space of a GAN. We show how the algorithm can efficiently locate an individual\u0026rsquo;s optimal face while mapping out their response across different semantic transformations of a face; inter-individual analyses suggest how the approach can provide rich information about individual differences in face processing.\nThis work was published and presented at ICML@AutoML workshop. The oral presentation can be accessed below.\n Paper   Code   Colab  Poster  Video\n   embed = new SlidesLiveEmbed('presentation-embed-38930665', { presentationId: '38930665', autoPlay: false, // change to true to autoplay the embedded presentation verticalEnabled: true });  A second part of the project is to build a tool that leverages FaceFitOpt (Bayesian optimization and GANs) with real-time EEG to target a biomarkers ERP (event-related potential). This paper is currently under review.   Key Features • How To Use • Download • Credits • Related • License -- ","date":1617461081,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617461081,"objectID":"984803eb8ce9e3f74c1abeae5df869c8","permalink":"http://pedroferreiradacosta.github.io/project/bayesian-optimization/","publishdate":"2021-04-03T15:44:41+01:00","relpermalink":"/project/bayesian-optimization/","section":"project","summary":"Exploring Bayesian Optimization as a tool for exploitation of configurational spaces in Neuroscience","tags":["Bayesian Optimization","Deep Learning","Machine Learning","Neuroscience","Generative Models","StyleGAN","Software Development","AutoML","EEG"],"title":"Building new methods with Bayesian Optimization","type":"project"},{"authors":["Pedro F da Costa"],"categories":["Deep Learning"],"content":"It is challenging to successfully train deep learning classifiers when the researcher only has access to small datasets or when the number of features of the input data is large. Both of these are the case for neuroimaging data. It is rare to find datasets with more than a couple thousand examples and this number is even lower for datasets of specific brain disorders. One different approach that bypasses this issue is building normative models of the brain and measure these disorders as specific out-of-distribution examples in a process of anomaly detection. One effective way to build normative models is using auto-regressors, that learn to map inputs to outputs while reducing the data in a middle bottleneck layer. This leads to the model reducing the large feature number of the data to a more manageable number that can be studied as a common distribution.\nIn a first project I contributed to, we developed an adversarial auto-encoder to distinguish mild-cognitive development and Alzheimer\u0026rsquo;s disease and compared the results to classical predicitve models working on the original data.\n Paper   Code \nIn a second project, we are using state-of-the-art VQVAEs to reduce brain data into a quantized latent space and using transformers to measure the likelihood of the given distribuiton of the data. This is being used to identify psychiatric disorders. This work is still in development\n ","date":1617461047,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617461047,"objectID":"a91a57bc1fd7008c30c23b8c187aa100","permalink":"http://pedroferreiradacosta.github.io/project/normative-modelling/","publishdate":"2021-04-03T15:44:07+01:00","relpermalink":"/project/normative-modelling/","section":"project","summary":"Using Auto-regressive models to identify out-of-distribution brain data to identify disorders","tags":["Deep Learning","Auto-regressive models","VQVAE","Transformer","OOD","Normative modelling","Psychiatric disorders","anomaly detection"],"title":"Normative Modelling in Psychiatry","type":"project"},{"authors":["Pedro F da Costa"],"categories":["Machine Learning","Software Development"],"content":"","date":1617461029,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617461029,"objectID":"1efe368bc3d9bc60b5fbc368c19756de","permalink":"http://pedroferreiradacosta.github.io/project/sklearn-rvm/","publishdate":"2021-04-03T15:43:49+01:00","relpermalink":"/project/sklearn-rvm/","section":"project","summary":"A scikit-learn style implementation of Tippings's RVM algorithm.","tags":["Machine Learning","Software Development","Relevance Vector Machine"],"title":"Relevance Vector Machine","type":"project"},{"authors":["Pedro F da Costa"],"categories":["machine learning"],"content":"The Brain Age problem is a standard example of the application of machine learning to Neuroimaging research. It consists on training predictors of age based solely on brain MRI scans. This is possible because the brain changes as we age. It also allows us to identify brains that are 'aging' faster than the expected - a biomarker for disorders such as Alzheimer's. In my research, I explored the use of classical machine learning and genetic algorithms to solve this problem. Despite the gain in popularity of deep learning methods across different fields (including neuroscience), it is still an open question if its performance can overcome classical methods in brain data, where the number of features is high and the number of samples is low. As deep learning methods have a higher tendency to overfit, classical machine learning methods such as Support Vector Machines, Relevance Vector Machines and Multiple Regressions have an important role in neuroscience research.\nTo test this point, I participated in an international competition to build brain-age models - Predictive Analytics Competition (PAC) 2019 - using only shallow machine learning models. Out of the 274 participants, our team finished in the top-10 most accurate models using an ensemble of shallow models. Our methods and approach are detailed in our paper:  Paper   Code   Website\nIn another study, we showed that there is no statistically significant difference between Support Vector Regression (SVM), Gaussian Process Regression (GPR) and Relevance Vector Regression (RVM), and that overall, the type of input data has a larger impact into the accuracy of the trained predictor.   Paper  Code\n","date":1617235200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617235200,"objectID":"4f4c0b28503d7231f309e9cff496ee3f","permalink":"http://pedroferreiradacosta.github.io/project/brain-age-problem/","publishdate":"2021-04-01T00:00:00Z","relpermalink":"/project/brain-age-problem/","section":"project","summary":"Deploying classical ML models for very-high-dimensional data. Top-10 on PAC2019 competition.","tags":["Machine Learning","Brain-age","SVM","Relevance Vector Machine","Regression Analysis","PAC2019","sMRI","Brain Health"],"title":"Brain-Age Problem","type":"project"},{"authors":["Lea Baecker","Jessica Dafflon","Pedro F. da Costa","Rafael Garcia-Dias","Sandra Vieira","Cristina Scarpazza","Vince D. Calhoun","João R. Sato","Andrea Mechelli","Walter H.L. Pinaya"],"categories":[],"content":"","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617464496,"objectID":"994277b678b13c04307c24ad17764299","permalink":"http://pedroferreiradacosta.github.io/publication/baecker-2021/","publishdate":"2021-04-03T15:41:36.096169Z","relpermalink":"/publication/baecker-2021/","section":"publication","summary":"Brain morphology varies across the ageing trajectory and the prediction of a person's age using brain features can aid the detection of abnormalities in the ageing process. Existing studies on such “brain age prediction” vary widely in terms of their methods and type of data, so at present the most accurate and generalisable methodological approach is unclear. Therefore, we used the UK Biobank data set (N = 10,824, age range 47–73) to compare the performance of the machine learning models support vector regression, relevance vector regression and Gaussian process regression on whole-brain region-based or voxel-based structural magnetic resonance imaging data with or without dimensionality reduction through principal component analysis. Performance was assessed in the validation set through cross-validation as well as an independent test set. The models achieved mean absolute errors between 3.7 and 4.7 years, with those trained on voxel-level data with principal component analysis performing best. Overall, we observed little difference in performance between models trained on the same data type, indicating that the type of input data had greater impact on performance than model choice. All code is provided online in the hope that this will aid future research.","tags":["\"biological ageing\"","\"healthy ageing\"","\"machine learning\"","\"regression analysis\"","\"support vector machine\""],"title":"Brain age prediction: A comparison between machine learning models using region- and voxel-based morphometric data","type":"publication"},{"authors":[],"categories":[],"content":"I love art and have always been fascinated by those who could express themselves and their creativity with the stroke of a brush. Unfortunately, I\u0026rsquo;ve been cursed with the ability to draw of a blind chicken. So it was with complete awe that I discovered that generative models can be manipulated to put together beautiful and aesthetic images. I became fascinated by these models and the idea that I can finally express myself in a visual canvas.\nThis is something that helps me unwind. Just taking strolls down latent space.\nBelow is a list of awesome resources (none authored by me) that can be used for image or audio generation.\nAwesome Generative Models for creativity List of awesome algorithms and notebooks freely available to use:\n  DALL-E Generating images from descriptions (VQVAE + Transformers)\n  Deep Fakes Application of FaceSwap to video.\n  Google Deep Dream Notebook to adapt input data (images) to minimize a given layer\u0026rsquo;s error. Trippy results.\n  BigGAN Really big generator - 1k categories and millions of parameters.\n  Style Transfer Transfering style between 2 2D images - e.g., change type of paintings\n Alien Element Add a foreign element to the image and adjust its style to original image    Lucid collection Feature visualization and networks interpretability\n  StyleGAN2\n Trained on bacteria, art, escher Change latent directions Encoding, interpolation, semantic latents and face alignement Other pre-trained StyleGAN2 and art and art from Wikipedia    Lucid Sonic Dreams Generative Audio-Visual Art - using music to navigate the latent space\n  Deep Music Visualizer Similar concept\n  DeOldify for images and videos\n  3D videos from single photo\n  First-order Motions\n  GPT2 - train and evaluate\n Javascript interface    StyleGAN + CLIP\n  BigGAN + CLIP\n   ","date":1587242405,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587242405,"objectID":"df21a7ab5d27f5657946dd9dd3700ac0","permalink":"http://pedroferreiradacosta.github.io/project/generative_art/","publishdate":"2020-04-18T21:40:05+01:00","relpermalink":"/project/generative_art/","section":"project","summary":"I like to take generative models and try to build creative things with it.","tags":[],"title":"Generative Art","type":"project"},{"authors":["Pedro F da Costa"],"categories":["Deep Learning"],"content":"The relationship between the brain and cognition remains unclear, despite several decades of functional neuroimaging research. One limitation is that the cognitive processes we attempt to match to brain activity are taken from psychological constructs derived in a somewhat ad hoc manner. This project took a different approach, taking advantage of developments with artificial neural networks (ANNs) to learn shared mechanisms. The purpose was to evaluate the execution mechanisms between multiple cognitive tasks without relying on predefined cognitive domains. Therefore, a Recurrent Neural Network was developed to perform six cognitive tasks with an accuracy of 93%, that tapped on the processes of reaction, inhibition and working memory. With regard to the obtained model, it was tested if the mechanism provides a good explanation for the activation patterns in the brain regions previously associated to the cognitive processes. Although comparisons between the model’s activations and real brain data bared little similarities, the model’s mechanisms expressed an effective system of interpreting each task. It was clear, by analysis of the model’s interpretation of the input dataset, that the concept of task and moment of reaction were important factors for the correct solution. From the study of node variation along trials, one stood out (unit 28) by displaying a behaviour similar to inhibition control in biological systems. This work intended to provide novel insights into both brain and cognition, suggesting a potential parallelism between the artificial model and the biological processes. This perspective can contribute to a clearer interpretation of the cognitive processes. This work was developed for my MSc thesis at the C3NL in Imperial College London. I presented this work at the Conference for Computational Neuroscience.\n Thesis  Paper  Code\n ","date":1585838602,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585838602,"objectID":"a6fa213659ab4d03d50c2d04ba15574d","permalink":"http://pedroferreiradacosta.github.io/project/modelling-behaviour/","publishdate":"2020-04-02T15:43:22+01:00","relpermalink":"/project/modelling-behaviour/","section":"project","summary":"Using neural networks to simulate human performance and interpret the model's trained weights","tags":["Deep Learning","LSTMs","RNNs"],"title":"Modelling Behaviour","type":"project"},{"authors":["Federico E. Turkheimer","Erik D. Fagerholm","Miriam Vignando","Jessica Dafflon","Pedro F. Da Costa","Paola Dazzan","Robert Leech"],"categories":[],"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617464496,"objectID":"8c04fd5cb919a83380a13b1e2951bd69","permalink":"http://pedroferreiradacosta.github.io/publication/turkheimer-2020/","publishdate":"2020-04-03T15:41:36.522298Z","relpermalink":"/publication/turkheimer-2020/","section":"publication","summary":"Vincent van Gogh was one of the most influential artists of the Western world, having shaped the post-impressionist art movement by shifting its boundaries forward into abstract expressionism. His distinctive style, which was not valued by the art-buying public during his lifetime, is nowadays one of the most sought after. However, despite the great deal of attention from academic and artistic circles, one important question remains open: was van Gogh's original style a visual manifestation distinct from his troubled mind, or was it in fact a by-product of an impairment that resulted from the psychiatric illness that marred his entire life? In this paper, we use a previously published multi-scale model of brain function to piece together a number of disparate observations about van Gogh's life and art. In particular, we first quantitatively analyze the brushwork of his large production of self-portraits using the image autocorrelation and demonstrate a strong association between the contrasts in the paintings, the occurrence of psychiatric symptoms, and his simultaneous use of absinthe—a strong liquor known to affect gamma aminobutyric acid (GABA) alpha receptors. Secondly, we propose that van Gogh suffered from a defective function of parvalbumin interneurons, which seems likely given his family history of schizophrenia and his addiction to substances associated with GABA action. This could explain the need for the artist to increasingly amplify the contrasts in his brushwork as his disease progressed, as well as his tendency to merge esthetic and personal experiences into a new form of abstraction.","tags":["\"GABA\"","\"Vincent van Gogh\"","\"interneuron\"","\"neuroscience of art\"","\"painting\"","\"psychosis\"","\"schizophrenia\"","\"self-portraits\""],"title":"A GABA Interneuron Deficit Model of the Art of Vincent van Gogh","type":"publication"},{"authors":["P. da Costa","R. Lorenz","R. Monti","E. Jones","R. Leech"],"categories":["Deep Learning","Machine Learning"],"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617445778,"objectID":"96d2a2f1698be93cb83007515eac70c9","permalink":"http://pedroferreiradacosta.github.io/publication/da-costa-2020/","publishdate":"2021-04-03T10:29:36.839508Z","relpermalink":"/publication/da-costa-2020/","section":"publication","summary":"Investigating the cognitive and neural mechanisms involved with face processing is a fundamental task in modern neuroscience and psychology. To date, the majority of such studies have focused on the use of pre-selected stimuli. The absence of personalized stimuli presents a serious limitation as it fails to account for how each individual face processing system is tuned to cultural embeddings or how it is disrupted in disease. In this work, we propose a novel framework which combines generative adversarial networks (GANs) with Bayesian optimization to identify individual response patterns to many different faces. Formally, we employ Bayesian optimization to efficiently search the latent space of state-of-the-art GAN models, with the aim to automatically generate novel faces, to maximize an individual subject’s response. We present results from a web-based proof-of-principle study, where participants rated images of themselves generated via performing Bayesian optimization over the latent space of a GAN. We show how the algorithm can efficiently locate an individual’s optimal face while mapping out their response across different semantic transformations of a face; inter-individual analyses suggest how the approach can provide rich information about individual differences in face processing.","tags":["Deep learning","Machine learning","Bayesian Optimization","neuroscience","human-in-the-loop"],"title":"Bayesian Optimization for real-time, automatic design of face stimuli in human-centred research","type":"publication"},{"authors":["Pedro F. Da Costa","Jessica Dafflon","Walter H. L. Pinaya"],"categories":["machine learning"],"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617445778,"objectID":"e496992724026b040ecc74a586e2e338","permalink":"http://pedroferreiradacosta.github.io/publication/da-costa-2020-a/","publishdate":"2021-04-03T10:29:38.638749Z","relpermalink":"/publication/da-costa-2020-a/","section":"publication","summary":"As we age, our brain structure changes and our cognitive capabilities decline. Although brain aging is universal, rates of brain aging differ markedly, which can be associated with pathological mechanism of psychiatric and neurological diseases. Predictive models have been applied to neuroimaging data to learn patterns associated with this variability and develop a neuroimaging biomarker of the brain condition. Aiming to stimulate the development of more accurate brain-age predictors, the Predictive Analytics Competition (PAC) 2019 provided a challenge that included a dataset of 2,640 participants. Here, we present our approach which placed between the top 10 of the challenge. We developed an ensemble of shallow machine learning methods (e.g., Support Vector Regression and Decision Tree-based regressors) that combined voxel-based and surface-based morphometric data. We used normalized brain volume maps (i.e., gray matter, white matter, or both) and features of cortical regions and anatomical structures, like cortical thickness, volume, and mean curvature. In order to fine-tune the hyperparameters of the machine learning methods, we combined the use of genetic algorithms and grid search. Our ensemble had a mean absolute error of 3.7597 years on the competition, showing the potential that shallow methods still have in predicting brain-age.","tags":["machine learning","brain age","genetic algorithms"],"title":"Brain-Age Prediction Using Shallow Machine Learning: Predictive Analytics Competition 2019","type":"publication"},{"authors":["Jessica Dafflon","Pedro F. da Costa","František Váša","Ricardo Pio Monti","Danilo Bzdok","Peter J. Hellyer","Federico Turkheimer","Jonathan Smallwood","Emily Jones","Robert Leech"],"categories":[],"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617464496,"objectID":"ae5e7e585d59ef3d856780d8eed6c06d","permalink":"http://pedroferreiradacosta.github.io/publication/dafflon-2020/","publishdate":"2021-04-03T15:41:36.307671Z","relpermalink":"/publication/dafflon-2020/","section":"publication","summary":"For most neuroimaging questions the huge range of possible analytic choices leads to the possibility that conclusions from any single analytic approach may be misleading. Examples of possible choices include the motion regression approach used and smoothing and threshold factors applied during the processing pipeline. Although it is possible to perform a multiverse analysis that evaluates all possible analytic choices, this can be computationally challenging and repeated sequential analyses on the same data can compromise inferential and predictive power. Here, we establish how active learning on a low-dimensional space that captures the inter-relationships between analysis approaches can be used to efficiently approximate the whole multiverse of analyses. This approach balances the benefits of a multiverse analysis without the accompanying cost to statistical power, computational power and the integrity of inferences. We illustrate this approach with a functional MRI dataset of functional connectivity across adolescence, demonstrating how a multiverse of graph theoretic and simple pre-processing steps can be efficiently navigated using active learning. Our study shows how this approach can identify the subset of analysis techniques (i.e., pipelines) which are best able to predict participants' ages, as well as allowing the performance of different approaches to be quantified.","tags":["\"Functional connectivity\"","\"Multiverse\"","\"Optimization\""],"title":"Neuroimaging: Into the multiverse","type":"publication"},{"authors":["W. Pinaya","Cristina Scarpazza","Lea Baecker","P. da Costa"],"categories":["Deep Learning"],"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617445778,"objectID":"9126a27b2522668a55d58b58018e9de7","permalink":"http://pedroferreiradacosta.github.io/publication/pinaya-2020/","publishdate":"2021-04-03T10:29:38.344754Z","relpermalink":"/publication/pinaya-2020/","section":"publication","summary":"Normative modelling is an emerging method for quantifying how individuals deviate from the healthy populational pattern. Several machine learning models have been implemented to develop normative models to investigate brain disorders, including regression, support vector machines and Gaussian process models. With the advance of deep learning technology, the use of deep neural networks has also been proposed. In this study, we assessed normative models based on deep autoencoders using structural neuroimaging data from patients with Alzheimer’s disease (n=206) and mild cognitive impairment (n=354). We first trained the autoencoder on an independent dataset (UK Biobank dataset) with 11,034 healthy controls. Then, we estimated how each patient deviated from this norm and established which brain regions were associated to this deviation. Finally, we compared the performance of our normative model against traditional classifiers. As expected, we found that patients exhibited deviations according to the severity of their clinical condition. The model identified medial temporal regions, including the hippocampus, and the ventricular system as critical regions for the calculation of the deviation score. Overall, the normative model had comparable cross-cohort generalizability to traditional classifiers. In order to promote open science, we are making all scripts and the trained models available to the wider research community.","tags":["Normative modelling","neuroimaging","Alzheimer’s disease","mild cognitive impairment","autoencoders","deep learning","anomaly detection"],"title":"Normative modelling using deep autoencoders: a multi-cohort study on mild cognitive impairment and Alzheimer's disease","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"http://pedroferreiradacosta.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["P. da Costa","S. Popescu","R. Leech","R Lorenz"],"categories":["Deep Learning"],"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617445778,"objectID":"bc865b90736f56df6828c97c9dc467b3","permalink":"http://pedroferreiradacosta.github.io/publication/da-costa-2019/","publishdate":"2021-04-03T10:29:38.097052Z","relpermalink":"/publication/da-costa-2019/","section":"publication","summary":"Despite several decades of functional neuroimaging research the relationship between brain networks and cognition remains elusive. This is because the taxonomy of cognitive processes was developed largely blind to the functional organization of the human brain. In this work, we leverage recent advances in artificial neural networks to gain insights into shared cognitive processes among six different cognitive tasks. We trained a single recurrent neural networks (RNN) to perform cognitive tasks. In this manner, we were able to evaluate shared representations between multiple cognitive tasks without relying on predefined cognitive processes. Next, we tested if the learned representations provide a good explanation for human brain activation patterns associated with these tasks. While we found little similarity between the RNN’s learned representation and real brain data, our approach offers a roadmap to gain more mechanistic insights into how cognitive processes map to brain networks with potential important implications for studying cognitive dysfunction in disease.","tags":["Modelling Behaviour","computational modelling","LSTMs","cognitive processes","human neuroimaging","deep learning"],"title":"Elucidating Cognitive Processes Using LSTMs","type":"publication"},{"authors":["P. da Costa","R. Nunes","R. Leech"],"categories":["Deep Learning"],"content":"","date":1514764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617445779,"objectID":"b3e679f93c36615d6f7f784d231d40ef","permalink":"http://pedroferreiradacosta.github.io/publication/da-costa-2018/","publishdate":"2021-04-03T10:29:38.974571Z","relpermalink":"/publication/da-costa-2018/","section":"publication","summary":"The relationship between the brain and cognition remains unclear, despite several decades of functional neuroimaging research. One limitation is that the cognitive processes we attempt to match to brain activity are taken from psychological constructs derived in a somewhat ad hoc manner. This project took a different approach, taking advantage of developments with artificial neural networks (ANNs) to learn shared mechanisms. The purpose was to evaluate the execution mechanisms between multiple cognitive tasks without relying on predefined cognitive domains. Therefore, a Recurrent Neural Network was developed to perform six cognitive tasks with an accuracy of 93%, that tapped on the processes of reaction, inhibition and working memory. With regard to the obtained model, it was tested if the mechanism provides a good explanation for the activation patterns in the brain regions previously associated to the cognitive processes. Although comparisons between the model’s activations and real brain data bared little similarities, the model’s mechanisms expressed an effective system of interpreting each task. It was clear, by analysis of the model’s interpretation of the input dataset, that the concept of task and moment of reaction were important factors for the correct solution. From the study of node variation along trials, one stood out (unit 28) by displaying a behaviour similar to inhibition control in biological systems. This work intended to provide novel insights into both brain and cognition, suggesting a potential parallelism between the artificial model and the biological processes. This perspective can contribute to a clearer interpretation of the cognitive processes.","tags":["RNNs","LSTMs","Deep Learning","Modelling behaviour","ontology","Neural Pathways","Cognitive Processes"],"title":"Application of Artificial Neural Networks for modelling cognitive dimensions","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"http://pedroferreiradacosta.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]